<#
.SYNOPSIS
    Retrieves ownership properties from Intune for Azure IDs listed in an Excel file.

.DESCRIPTION
    This script performs the following actions:
    1. Checks if the Microsoft.Graph and ImportExcel modules are installed. If not, installs them.
    2. Lists all .xlsx files in the current directory and prompts the user to select one.
    3. Reads the selected Excel file and extracts all values from the "Azure ID" column.
    4. For each Azure ID, retrieves the ownership property from Intune via Microsoft Graph.
    5. Logs all actions and outputs to both a log file and the console with colored messages.

.NOTES
    - Requires PowerShell 5.1 or later.
    - Ensure you have the necessary permissions to access Intune data via Microsoft Graph.
    - The script handles interactive login, supporting multi-factor authentication (MFA).
#>

# Define log file path
$logFile = Join-Path -Path (Get-Location) -ChildPath "script.log"

# Function to log messages to file and host with colors
function Write-Log {
    param (
        [Parameter(Mandatory)]
        [string]$Message,

        [Parameter(Mandatory)]
        [ValidateSet("INFO", "SUCCESS", "ERROR", "WARN")]
        [string]$Level
    )

    # Prepend timestamp
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $logMessage = "$timestamp [$Level] $Message"

    # Write to log file
    try {
        Add-Content -Path $logFile -Value $logMessage -ErrorAction Stop
    }
    catch {
        Write-Host "Failed to write to log file. Error: $_" -ForegroundColor Red
    }

    # Define colors based on level
    switch ($Level) {
        "INFO"    { $color = "Cyan" }
        "SUCCESS" { $color = "Green" }
        "ERROR"   { $color = "Red" }
        "WARN"    { $color = "Yellow" }
        default   { $color = "White" }
    }

    # Write to host with color
    Write-Host $logMessage -ForegroundColor $color
}

# Function to check and install a module if not present
function Ensure-Module {
    param (
        [Parameter(Mandatory)]
        [string]$ModuleName
    )

    if (-not (Get-Module -ListAvailable -Name $ModuleName)) {
        Write-Log -Message "Module '$ModuleName' not found. Installing..." -Level "WARN"
        try {
            Install-Module -Name $ModuleName -Scope CurrentUser -Force -AllowClobber -ErrorAction Stop
            Write-Log -Message "Module '$ModuleName' installed successfully." -Level "SUCCESS"
        }
        catch {
            Write-Log -Message "Failed to install module '$ModuleName'. Error: $_" -Level "ERROR"
            exit 1
        }
    }
    else {
        Write-Log -Message "Module '$ModuleName' is already installed." -Level "INFO"
    }

    # Import the module
    try {
        Import-Module $ModuleName -Global -ErrorAction Stop
        Write-Log -Message "Module '$ModuleName' imported successfully." -Level "SUCCESS"
    }
    catch {
        Write-Log -Message "Failed to import module '$ModuleName'. Error: $_" -Level "ERROR"
        exit 1
    }
}

# Start logging
Write-Log -Message "Script execution started." -Level "INFO"

# Ensure required modules are installed and imported
Ensure-Module -ModuleName "Microsoft.Graph"
Ensure-Module -ModuleName "ImportExcel"

# Connect to Microsoft Graph with interactive login (supports MFA)
Write-Log -Message "Connecting to Microsoft Graph..." -Level "INFO"
try {
    Connect-MgGraph -Scopes "DeviceManagementManagedDevices.Read.All" -ErrorAction Stop
    Write-Log -Message "Successfully connected to Microsoft Graph." -Level "SUCCESS"
}
catch {
    Write-Log -Message "Failed to connect to Microsoft Graph. Error: $_" -Level "ERROR"
    exit 1
}

# Verify connection
try {
    $user = Get-MgUser -UserId "me" -ErrorAction Stop
    Write-Log -Message "Authenticated as $($user.DisplayName) ($($user.UserPrincipalName))." -Level "INFO"
}
catch {
    Write-Log -Message "Failed to retrieve user information. Error: $_" -Level "ERROR"
    exit 1
}

# List all .xlsx files in the current directory
Write-Log -Message "Scanning for .xlsx files in the current directory..." -Level "INFO"
$excelFiles = Get-ChildItem -Path . -Filter *.xlsx -File

if ($excelFiles.Count -eq 0) {
    Write-Log -Message "No .xlsx files found in the current directory." -Level "ERROR"
    exit 1
}
elseif ($excelFiles.Count -eq 1) {
    $selectedFile = $excelFiles[0].FullName
    Write-Log -Message "Only one .xlsx file found: '$($excelFiles[0].Name)'. Selecting it automatically." -Level "INFO"
}
else {
    Write-Log -Message "Multiple .xlsx files found:" -Level "INFO"
    for ($i = 0; $i -lt $excelFiles.Count; $i++) {
        Write-Host "[$($i + 1)] $($excelFiles[$i].Name)" -ForegroundColor Yellow
    }

    # Prompt user to select a file
    $selection = Read-Host "Enter the number corresponding to the file you want to select"

    # Validate input
    if (-not ($selection -match '^\d+$') -or [int]$selection -lt 1 -or [int]$selection -gt $excelFiles.Count) {
        Write-Log -Message "Invalid selection. Please run the script again and enter a valid number." -Level "ERROR"
        exit 1
    }

    $selectedFile = $excelFiles[[int]$selection - 1].FullName
    Write-Log -Message "Selected file: '$($excelFiles[[int]$selection - 1].Name)'." -Level "INFO"
}

# Read the selected Excel file and extract 'Azure ID' column
Write-Log -Message "Reading Excel file: '$selectedFile'." -Level "INFO"
try {
    $excelData = Import-Excel -Path $selectedFile -ErrorAction Stop
    Write-Log -Message "Excel file read successfully." -Level "SUCCESS"
}
catch {
    Write-Log -Message "Failed to read Excel file. Ensure the file is not open and has a valid format. Error: $_" -Level "ERROR"
    exit 1
}

# Check if 'Azure ID' column exists
if (-not ($excelData | Get-Member -Name "Azure ID")) {
    Write-Log -Message "The Excel file does not contain an 'Azure ID' column. Please verify the column name." -Level "ERROR"
    exit 1
}

# Extract Azure IDs, removing duplicates and empty entries
$azureIDs = $excelData."Azure ID" | Where-Object { $_ -ne $null -and $_.ToString().Trim() -ne "" } | Select-Object -Unique

if ($azureIDs.Count -eq 0) {
    Write-Log -Message "No valid 'Azure ID' entries found in the Excel file." -Level "ERROR"
    exit 1
}

Write-Log -Message "Found $($azureIDs.Count) unique Azure ID(s) to process." -Level "INFO"

# Iterate over each Azure ID and retrieve ownership from Intune
foreach ($id in $azureIDs) {
    Write-Log -Message "Processing Azure ID: '$id'." -Level "INFO"

    try {
        # Retrieve managed device information
        $device = Get-MgDeviceManagementManagedDevice -ManagedDeviceId $id -ErrorAction Stop

        # Extract ownership property
        $ownership = $device.Ownership

        # Output ownership information
        Write-Log -Message "Azure ID '$id' Ownership: '$ownership'." -Level "SUCCESS"
    }
    catch {
        # Handle specific errors, e.g., not found
        if ($_.Exception.Message -like "*not found*") {
            Write-Log -Message "Azure ID '$id' not found in Intune." -Level "WARN"
        }
        else {
            Write-Log -Message "Failed to retrieve ownership for Azure ID '$id'. Error: $_" -Level "ERROR"
        }
    }
}

Write-Log -Message "Script execution completed." -Level "INFO"
